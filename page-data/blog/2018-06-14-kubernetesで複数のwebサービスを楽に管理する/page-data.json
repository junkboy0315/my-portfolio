{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/2018-06-14-kubernetesで複数のwebサービスを楽に管理する/","result":{"data":{"markdownRemark":{"excerpt":"複数ドメインの Web サービスを Kubernetes 上で楽に管理するための環境構築を行ったので、手順をメモしておきます。詳細は参考サイトに非常にわかりやすくまとまっているので、ご参照ください。なお、環境は Google Kubernetes Engine…","html":"<p>複数ドメインの Web サービスを Kubernetes 上で楽に管理するための環境構築を行ったので、手順をメモしておきます。詳細は参考サイトに非常にわかりやすくまとまっているので、ご参照ください。なお、環境は Google Kubernetes Engine を想定しています。</p>\n<h2>目標</h2>\n<ul>\n<li>\n<p>複数の Web サービスとそれに紐付く Kubernetes サービスを、同一の IP で管理する</p>\n<p>→<strong>Ingress のバーチャルホスト機能を使う</strong></p>\n</li>\n<li>\n<p>Let's Encrypt を使い、証明書の自動取得・更新を行う</p>\n<p>→<strong><a href=\"https://cert-manager.readthedocs.io/en/latest/\">cert-manager</a> を使う</strong></p>\n</li>\n</ul>\n<h2>Ingress Controller の選定</h2>\n<p>Ingress Contoller に、標準である<a href=\"https://github.com/kubernetes/ingress-gce\">GLBC</a>(GCE L7 load balancer controller)を使った場合と、\n<a href=\"https://github.com/kubernetes/ingress-nginx\">Nginx Ingress Controller</a>を使った場合では、内部の動きが異なってきます。</p>\n<p>GLBC を使った場合は、Ingress をデプロイすると自動的に <strong>L7</strong> ロードバランサが生成され、通信を終端します。この L7 ロードバランサを使って、ダイレクトにバックエンドサービスに通信を振り分けます。</p>\n<p>一方、Nginx Ingress Controller を使った場合は、L7 ロードバランサは作成されません。代わりに nginx-ingress-controller というサービスが <strong>L4</strong> ロードバランサを生成し、通信を終端します。一旦、Nginx Ingress Controller が通信を受けて、Ingress Resource に問い合わせを行い、\n改めて L7 レベルのルーティングを行う、という流れです（<a href=\"https://cloud.google.com/community/tutorials/nginx-ingress-gke\">参考サイト</a>に図が載っています）。この際、ingress の yaml に記載した内容は<strong>単なる設定情報（Ingress Resource）</strong>としてのみ機能します。</p>\n<p>このあたりを理解するのはなかなか骨が折れますが、<a href=\"https://www.mkubaczyk.com/2017/12/13/kubernetes-ingress-controllers-nginx-gce-google-kubernetes-engine/\">こちらの記事</a>によくまとまっているので、興味のある方は見てみてください。</p>\n<p>今回は Nginx Ingress Controller を選択しました。GLBC には、HTTP から HTTPS へのリダイレクトを行う機能がないためです。</p>\n<p>なお、今回の構成では、設定情報はすべて Ingress Resource で管理するため、Nginx Ingress Controller は stateless であり、いつでも削除・再設置できます。</p>\n<h2>参考サイト</h2>\n<p>このページでやっていることは、下記の 2 つの記事をミックスしたものです。</p>\n<ul>\n<li><a href=\"https://github.com/ahmetb/gke-letsencrypt\">1．標準の Ingress Contorller（GLBC）を使って証明書の自動取得をする</a></li>\n<li><a href=\"https://cloud.google.com/community/tutorials/nginx-ingress-gke\">2．Ingress Controller に nginx-ingress を使う</a></li>\n</ul>\n<h2>手順</h2>\n<h3>1. クラスタ環境の構築</h3>\n<p>Kubernetes クラスタはすでに構築されているものと仮定します。</p>\n<h3>2. helm のインストール</h3>\n<p><a href=\"https://helm.sh/\">helm</a> は kubernetes 用のパッケージマネージャです。これを使うと、かなり楽に Kubernetes 上にパッケージをデプロイできます。</p>\n<p>Helm は、クライアントサイドで動く<code class=\"language-text\">helm</code>コマンドと、Kubernetes 上で動く<code class=\"language-text\">Tiller</code>というサービス群の二つの要素から構成されています。まず、<a href=\"https://helm.sh/\">helm のサイト</a>から CLI バイナリをダウンロードし、パスを通しておきます。その上で、下記を実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># kube-systemネームスペースに、tillerというサービスアカウントを作成</span>\nkubectl create serviceaccount tiller <span class=\"token operator\">--</span>namespace kube<span class=\"token operator\">-</span>system\n\n<span class=\"token comment\"># tillerアカウントにcluster-adminの権限をバインドする（与える）</span>\nkubectl create clusterrolebinding tiller<span class=\"token operator\">-</span>binding `\n  <span class=\"token operator\">--</span>clusterrole=cluster<span class=\"token operator\">-</span>admin `\n  <span class=\"token operator\">--</span>serviceaccount=kube<span class=\"token operator\">-</span>system:tiller\n\n<span class=\"token comment\"># Tiller(helmのサーバサイドのサービス群)をデプロイする</span>\nhelm init <span class=\"token operator\">--</span>upgrade <span class=\"token operator\">--</span>service<span class=\"token operator\">-</span>account tiller</code></pre></div>\n<p>これで、コマンド一発で Kubernetes にサービスをインストールできる環境が整いました。</p>\n<h3>3. nginx-ingress のインストール</h3>\n<p>nginx-ingress を helm を使ってインストールします。このコマンドにより、nginx-ingress に必要な各種の Deployment や Service が一括して作成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">helm install stable/nginx-ingress \\\n  --name nginx-ingress \\\n  --namespace kube-system \\\n  --set rbac.create=true</code></pre></div>\n<p>コマンドを実行すると、kube-system ネームスペースに、nginx-ingress-controller というサービスがロードバランサーとして作成されます。</p>\n<p>すべてのドメインの名前解決先は、このロードバランサに向けるする必要があるため、固定 IP を設定しておきましょう。固定 IP の予約はプロバイダによって方法が異なりますが、GCP の場合は「VPC Network」→「External IP Address」から予約できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">kubectl edit svc nginx-ingress-controller --namespace=kube-system</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># type: LoadBalancer の直下に下記を追加する</span>\n<span class=\"token key atrule\">loadBalancerIP</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.23.4.56\"</span></code></pre></div>\n<h3>4. DNS の設定変更</h3>\n<p>使用する予定のドメインを、nginx-ingress-controller サービスのロードバランサの IP に向かうように設定しておきましょう。IP は、<code class=\"language-text\">kubectl get svc nginx-ingress-controller --namespace=kube-system</code>で表示される<code class=\"language-text\">EXTERNAL-IP</code>です。</p>\n<h3>5. Ingress の仮設定</h3>\n<p>とりあえず、TLS を使わない形で Ingress を仮設定します。この段階で Ingress が必要な理由は、cert-manager が Let's Encrypt から証明書を取得する際に、Ingress Resource に認証用のパスを動的に追加する必要があるためです。</p>\n<p>下記の例では、すでに<code class=\"language-text\">some-my-service</code>というサービス（公開したい Web アプリ）が設置されていると仮定しています。サービスは、<code class=\"language-text\">type:NodePort</code>で expose されている必要があるので、確認しておいてください。確認は、<code class=\"language-text\">kubectl get svc</code>で行えます。</p>\n<p>バーチャルホストを使用する方式で記述していますので、ドメインを増やすときは、spec.rules の配下にドメインを追加していけば OK です。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># my-ingress.yaml</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>ingress\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># nginx-ingressを、Ingress Contollerとして使用する</span>\n    <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> nginx\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> some.dummy<span class=\"token punctuation\">-</span>url.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> some<span class=\"token punctuation\">-</span>my<span class=\"token punctuation\">-</span>service\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f my-ingress.yaml</code></pre></div>\n<h3>6. cert-manager をインストール</h3>\n<p>下記のコマンドで cert-manager をインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">helm install <span class=\"token operator\">--</span>name cert<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>version v0<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>1 `\n    <span class=\"token operator\">--</span>namespace kube<span class=\"token operator\">-</span>system stable<span class=\"token operator\">/</span>cert<span class=\"token operator\">-</span>manager</code></pre></div>\n<h3>7. ClusterIssuer の作成</h3>\n<p>LetsEncrypt を ClusterIssuer (証明書の発行者)として設定します。失敗を重ねるとペナルティを受ける場合があるみたいなので、テスト用と本番用を用意します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># cluster-issuer.yaml</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> certmanager.k8s.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterIssuer\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> letsencrypt<span class=\"token punctuation\">-</span>staging <span class=\"token comment\"># テスト用</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">acme</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//acme<span class=\"token punctuation\">-</span>staging<span class=\"token punctuation\">-</span>v02.api.letsencrypt.org/directory\n    <span class=\"token key atrule\">email</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'your@address.com'</span>\n    <span class=\"token key atrule\">privateKeySecretRef</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> letsencrypt<span class=\"token punctuation\">-</span>staging\n    <span class=\"token key atrule\">http01</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> certmanager.k8s.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterIssuer\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> letsencrypt<span class=\"token punctuation\">-</span>prod <span class=\"token comment\"># 本番用</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">acme</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//acme<span class=\"token punctuation\">-</span>v02.api.letsencrypt.org/directory\n    <span class=\"token key atrule\">email</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'your@address.com'</span>\n    <span class=\"token key atrule\">privateKeySecretRef</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> letsencrypt<span class=\"token punctuation\">-</span>prod\n    <span class=\"token key atrule\">http01</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f cluster-issuer.yaml</code></pre></div>\n<h3>8. Certificate の作成、証明書の自動取得</h3>\n<p>下記の yaml を apply すると、cert-manager によって自動的に証明書の取得が始まります。10 分くらいかかります。</p>\n<p>ここで何が起こっているかの詳細は、<a href=\"https://github.com/ahmetb/gke-letsencrypt/blob/master/50-get-a-certificate.md\">こちらのページ</a>を参照してください。簡潔に書くと、Ingress Resource に認証用の一時的なルール（パス）を動的に設定し、これを使って Let's Encrypt に認証をさせているようです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># certificate.yaml</span>\n\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> certmanager.k8s.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Certificate\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> some<span class=\"token punctuation\">-</span>dummyurl<span class=\"token punctuation\">-</span>tls <span class=\"token comment\"># 証明書を格納するSecretにつける名前</span>\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> some<span class=\"token punctuation\">-</span>dummyurl<span class=\"token punctuation\">-</span>tls <span class=\"token comment\"># 証明書を格納するSecretにつける名前</span>\n  <span class=\"token key atrule\">issuerRef</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ClusterIssuerを指定する。</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> letsencrypt<span class=\"token punctuation\">-</span>staging\n    <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterIssuer\n  <span class=\"token key atrule\">commonName</span><span class=\"token punctuation\">:</span> some.dummy<span class=\"token punctuation\">-</span>url.com <span class=\"token comment\"># ドメイン</span>\n  <span class=\"token key atrule\">dnsNames</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> some.dummy<span class=\"token punctuation\">-</span>url.com <span class=\"token comment\"># ドメイン</span>\n  <span class=\"token key atrule\">acme</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http01</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ingress</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>ingress <span class=\"token comment\"># 使用しているIngressの名前</span>\n      <span class=\"token key atrule\">domains</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> some.dummy<span class=\"token punctuation\">-</span>url.com <span class=\"token comment\"># ドメイン</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f certificate.yaml</code></pre></div>\n<p>証明書の取得状況は、<code class=\"language-text\">kubectl describe -f certificate.yaml</code>で随時確認できます。<code class=\"language-text\">Certificate issued successfully</code>などと表示されれば、証明書の取得は完了しています。結構時間がかかるので辛抱強さが必要です。</p>\n<p>証明書の取得が完了すると、今回の場合は<code class=\"language-text\">some-dummyurl-tls</code>というシークレットに証明書が格納されます。</p>\n<p>無事に取得ができることを確認できたら、上記の<code class=\"language-text\">letsencrypt-staging</code>を<code class=\"language-text\">letsencrypt-prod</code>に変更して、再度証明書を取得します。</p>\n<h3>9. TLS を使用する</h3>\n<p>取得した証明書を使うため、Ingress の設定を変更します。ドメインが増えた場合は、spec.tls と spec.rules の配下を追加することで対応します。</p>\n<p>nginx-ingress の設定は、Ingress の設定の中で<a href=\"https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/\">annotation</a>を使って管理できます。下記の例では、http を https へリダイレクトする設定を入れています。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>ingress\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/ssl-redirect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span> <span class=\"token comment\"># http=>httpsへリダイレクトする</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tls</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 取得した証明書を使って通信させる</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> some<span class=\"token punctuation\">-</span>dummyurl<span class=\"token punctuation\">-</span>tls\n    <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> some.dummy<span class=\"token punctuation\">-</span>url.com\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> some.dummy<span class=\"token punctuation\">-</span>url.com\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> some<span class=\"token punctuation\">-</span>my<span class=\"token punctuation\">-</span>service\n          <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<p>もし、nginx-ingress の使用をやめて 標準の Ingress Controller である GLBC に戻したい場合は、下記の手順を行います。</p>\n<ul>\n<li>\n<p>Ingress の定義を下記の通り変更し、再デプロイする。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 下記の行を削除する</span>\n<span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> nginx\n\n<span class=\"token comment\"># もしくは下記の通り記述する（記載がない場合は暗黙的にgceが指定されますが、明示してもOK）</span>\n<span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> gce</code></pre></div>\n</li>\n<li>DNS の向き先を GLBC(<strong>L7</strong> ロードバランサ)に変更する。IP は<code class=\"language-text\">kubectl get ingress</code>で取得できる。</li>\n</ul>\n<p>なお、Ingress Controller の種類にかかわらず、設定情報は Ingress Resource によって抽象化されているため、cert-manager はどちらの環境でも問題なく動作します。</p>\n<h2>注意事項</h2>\n<ul>\n<li>Ingress の設定は反映されるまでに 5 ～ 10 分程度かかります。エラーがでても、しばらくたつと問題なく動作していたりします。この点は、現状では我慢するしかありません。</li>\n</ul>\n<h2>所感</h2>\n<p>Kubernetes は 2 年ぶりぐらいに触りましたが、かなり進化していて嬉しくなりました。昨今、インフラがどんどん Stateless になっていくのを感じます。インフラの定義はコードになって、コマンド一発で同じ環境を再現できるようになりました。</p>\n<p>また、今回の取り組みは、「どうやったら Kubernetes で複数の Web サービスを一括管理できるか？」と思い立ってから、上記の構成を構築するまで、たったの 1 日で完了させることができました。</p>\n<p>いい時代です。</p>","fields":{"slug":"/2018-06-14-kubernetesで複数のwebサービスを楽に管理する/"},"frontmatter":{"title":"Kubernetesで複数のWebサービスを楽に管理する","summary":"バーチャルホストと証明書自動更新の機能を実装し、Kubernetesで複数ドメインのWebサービスを楽に管理するための環境構築を行いました。","date":"2018-06-14T11:22:26+09:00","dateModified":"2018-06-14T11:22:26+09:00","thumbnail":"/blogImages/20180614.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-06-14-kubernetesで複数のwebサービスを楽に管理する/","modifiedDate":"2018-06-14T11:22:26+09:00"}}}