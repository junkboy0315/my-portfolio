{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/2018-07-31-デモシステムを作成しました/","result":{"data":{"markdownRemark":{"excerpt":"営業活動を行うにあたり、デモ用の Web サービスを作成しましたのでご紹介させてください。 概要 古い写真と新しい写真を比較できる「Travelr」というサービスです（Time Traveler 的なことです）。 RePhotos…","html":"<p>営業活動を行うにあたり、デモ用の Web サービスを作成しましたのでご紹介させてください。</p>\n<img src=\"/blogImages/20180731_phone.png\" style=\"max-width: 200px\" />\n<h2>概要</h2>\n<p>古い写真と新しい写真を比較できる「<a href=\"https://travelr.yuuniworks.com/\">Travelr</a>」というサービスです（Time Traveler 的なことです）。</p>\n<p><a href=\"https://www.re.photos\">RePhotos</a>や<a href=\"http://kamakura.konjyac.com/\">鎌倉今昔写真</a>など、既存のサービスがいくつか存在するものの、SPA のアプリは存在しなかったので、勉強がてら作ってみました。</p>\n<p>自由に操作していただいて構いません。なお、暫定的にダミーデータを 5,000 件ほど登録してあります。</p>\n<h2>Web サイト</h2>\n<p><a href=\"https://travelr.yuuniworks.com/\">Travelr</a></p>\n<h2>ソースコード</h2>\n<p><a href=\"https://github.com/junkboy0315/travelr/\">https://github.com/junkboy0315/travelr/</a></p>\n<h2>構成</h2>\n<h3>フロントエンドで使っているもの</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>react / redux</td>\n<td>UI/State 管理</td>\n</tr>\n<tr>\n<td>redux-thunk</td>\n<td>redux ミドルウェア</td>\n</tr>\n<tr>\n<td>redux-observable (RxJS)</td>\n<td>redux ミドルウェア</td>\n</tr>\n<tr>\n<td>material-ui</td>\n<td>マテリアルデザインの UI フレームワーク</td>\n</tr>\n<tr>\n<td>enzyme</td>\n<td>React コンポーネント用のテストツール</td>\n</tr>\n<tr>\n<td>webpack / webpack-serve</td>\n<td>モジュールバンドラー</td>\n</tr>\n<tr>\n<td>Typescript</td>\n<td>型を使うため</td>\n</tr>\n<tr>\n<td>Babel</td>\n<td>トランスパイラ</td>\n</tr>\n<tr>\n<td>Workbox</td>\n<td>PWA 対応</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Typescript は、Babel@7 の <code class=\"language-text\">@babel/preset-typescript</code> を使ってトランスパイルしています。Webpack のローダーを使うよりもシンプルな構成になるのでおすすめです。</li>\n<li>型の利用に関して、当初は<a href=\"https://github.com\">Flow</a>を使っていたのですが、当方の環境では動作がとても不安定であったため、途中で Typescript に変更しました。</li>\n</ul>\n<h3>バックエンドで使っているもの</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Firebase</td>\n<td>認証・ストレージ</td>\n</tr>\n<tr>\n<td>PostgreSQL + PostGIS</td>\n<td>データベース</td>\n</tr>\n<tr>\n<td>pgAdmin4</td>\n<td>データベース管理</td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td>API サーバ</td>\n</tr>\n<tr>\n<td>Kubernetes</td>\n<td>コンテナ管理</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>バックエンドのプロセスは、全て Docker コンテナにして、GCP 上の Kubernetes にデプロイしています。</li>\n<li>データベースも Firebase に統合したかったのですが、緯度経度検索が弱いようだったので PostgreSQL + PostGIS を選択しました。</li>\n</ul>\n<h3>バックエンド・フロントエンドのどちらでも使っているもの</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GraphQL</td>\n<td>問い合わせ言語</td>\n</tr>\n<tr>\n<td>lerna</td>\n<td>monorepo</td>\n</tr>\n<tr>\n<td>jest</td>\n<td>テストツール</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>一部の処理（データの取得）に、試験的に GraphQL を使用しています。</li>\n<li>ソースの管理は Lerna を用いて一つのリポジトリで管理しています。</li>\n<li>\n<p>フロントエンド・バックエンドとも、Jest を用いてユニットテストを記述しています。<a href=\"https://github.com/junkboy0315/travelr/tree/master/packages/travelr-fe/src/components/__tests__\">React Component のテスト</a>には enzyme を使用しました。</p>\n<p><img src=\"/blogImages/20180731_jest.png\" alt=\"jest\"></p>\n</li>\n</ul>\n<h3>データの保存先</h3>\n<p>データの保存先は、それぞれ下記のようになっています。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">種類</th>\n<th>保存先</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">認証情報</td>\n<td>Firebase (Auth)</td>\n</tr>\n<tr>\n<td align=\"center\">画像データ</td>\n<td>Firebase (Storage)</td>\n</tr>\n<tr>\n<td align=\"center\">ユーザ情報<br>投稿のメタ情報<br>コメント<br>いいね<br></td>\n<td>PostgreSQL</td>\n</tr>\n</tbody>\n</table>\n<h3>権限管理の方法</h3>\n<h4>API サーバ(Node.js）</h4>\n<p>クライアントから送られてくる Fireabse の JWT トークンを Node.js サーバが受け取り、Firebase に問い合わせることで有効性を検証しています。</p>\n<h4>ストレージ</h4>\n<p>Firebase の <a href=\"https://firebase.google.com/docs/storage/security/start?hl=ja\">Storege セキュリティルール</a>で管理しています。</p>\n<h2>主な機能</h2>\n<h3>認証</h3>\n<img src=\"/blogImages/20180731_login.png\" style=\"max-width: 300px\" />\n<p>Firebase Auth を活用し、ひと通りの機能を実装しています。</p>\n<ul>\n<li>Google 認証</li>\n<li>Facebook 認証</li>\n<li>メール認証</li>\n<li>メールのベリファイ</li>\n<li>パスワードリセット</li>\n<li>アカウント削除</li>\n</ul>\n<h3>グリッド表示</h3>\n<img src=\"/blogImages/20180731_grid.png\" style=\"max-width: 300px\" />\n<p>インスタ風なルックスです。インフィニティにスクロールします。</p>\n<h3>マップ表示</h3>\n<img src=\"/blogImages/20180731_map.png\" style=\"max-width: 300px\" />\n<p>マーカーもしくはマーカークラスタをクリックすると、モーダルで写真を閲覧できます。</p>\n<img src=\"/blogImages/20180731_view_modal.png\" style=\"max-width: 300px\" />\n<h3>フィルタ</h3>\n<img src=\"/blogImages/20180731_filter.png\" style=\"max-width: 300px\" />\n<p>撮影日や閲覧数などを条件にして、フィルタをかけて検索することができます。</p>\n<p>地図検索にも対応しており、例えば「出雲大社から 50km 以内」といった検索も可能です。これは、Google Geocoding API と PostGIS の機能を組み合わせています。</p>\n<h3>閲覧</h3>\n<img src=\"/blogImages/20180731_view.png\" style=\"max-width: 300px\" />\n<p>投稿の詳細画面では、スライダを使って古い写真と新しい写真を見比べることができます。また、いいねやコメントをつけることができます。</p>\n<h3>投稿と編集</h3>\n<img src=\"/blogImages/20180731_creating.png\" style=\"max-width: 300px\" />\n<ul>\n<li>写真を投稿したり、投稿した写真の情報をあとから編集できます。</li>\n<li>スマホであればカメラで撮影して投稿することもできます。</li>\n<li>住所や建物名から検索することで、撮影位置を設定できます。ピンをドラッグすることで微調整もできます。</li>\n</ul>\n<h3>投稿の管理</h3>\n<img src=\"/blogImages/20180731_manage.png\" style=\"max-width: 300px\" />\n<p>自分の投稿に関する統計情報の閲覧や、投稿の削除ができます。</p>\n<h3>PWA 対応</h3>\n<ul>\n<li>App Shell をキャッシュしているため、2 回目以降の訪問時において、初期レンダリングが高速に完了します。また、通信が不安定な環境であっても、必要最低限の部分は問題なくレンダリングされます。</li>\n<li>AppManifest によりスマホのホーム画面等への追加が可能となっており、スタンドアロンアプリ風に見せることができます。</li>\n</ul>\n<h2>その他</h2>\n<h3>スライダの作成</h3>\n<p><img src=\"https://react-compare-image.yuuniworks.com/anime.gif\" alt=\"スライダ\"></p>\n<p>上記のようにスライダを使って写真を比較できる React コンポーネントが必要だったのですが、よいものがありませんでした。このため、<a href=\"https://www.npmjs.com/package/react-compare-image\">react-compare-image</a>というライブラリを自作しました。このライブラリは npm で公開しています。</p>\n<h3>Cloud Function の利用</h3>\n<p>Firebase の Cloud Funtion を使っています。画像がストレージにアップロードされると、自動的に下記の処理が走ります。</p>\n<ol>\n<li><a href=\"https://cloud.google.com/vision/\">Cloud Vision API</a>で画像を分析し、暴力的な画像など、不適切な画像であると判定された場合は特定の処理を行う。</li>\n<li>オリジナルの画像から、三種類の異なるサイズの画像を生成し、ストレージに配置する。</li>\n</ol>\n<h3>Redux Middleware の選択</h3>\n<p>はじめは redux-thunk を使っていたものの、すぐに辛くなりました。</p>\n<p>「一つのアクションが終わったら、別のアクションを実行する」という処理が、thunk ではうまく書けないからです。実際には書けないことはないですが、とても辛いし、一つのロジックが複数のアクションに散在して管理性も低くなります。</p>\n<p>このため、途中で redux-observable を導入しました。特に、スナックバー通知、プログレスバーの表示、ページのリダイレクトなど、システム全体で利用するロジックは、redux-observable を活用することで劇的に書きやすくなりました。</p>\n<p>例えば下記のコードはリダイレクトの処理をしている Epic の例です。リダイレクトの処理を書きたいとき or リダイレクトに問題が発生したときは、この一箇所を見るだけですみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">redirectorEpic</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action$<span class=\"token operator\">:</span> ActionsObservable<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  action$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">ofType</span><span class=\"token punctuation\">(</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OR_CREATE_USER_INFO_SUCCESS</span><span class=\"token punctuation\">,</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_USER_SUCCESS</span><span class=\"token punctuation\">,</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">SIGN_OUT_USER_SUCCESS</span><span class=\"token punctuation\">,</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">CREATE_POST_SUCCESS</span><span class=\"token punctuation\">,</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_POST_SUCCESS</span><span class=\"token punctuation\">,</span>\n      types<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_POST_SUCCESS</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">GET_OR_CREATE_USER_INFO_SUCCESS</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'/auth'</span><span class=\"token punctuation\">)</span> history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/all-map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_USER_SUCCESS</span><span class=\"token operator\">:</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SIGN_OUT_USER_SUCCESS</span><span class=\"token operator\">:</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">CREATE_POST_SUCCESS</span><span class=\"token operator\">:</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/post/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_POST_SUCCESS</span><span class=\"token operator\">:</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/post/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE_POST_SUCCESS</span><span class=\"token operator\">:</span>\n          history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/account/posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_REDIRECTED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>開発を終えて</h2>\n<ul>\n<li>全てのコードに対して愚直にテストを書いていたら、かなり手間を取られました。どのテストを書かないか、ということも検討しなければならないですね。</li>\n<li>この開発には、実働で 40 日程度かかりました。うち、バックエンドにかけた日数が 12 日、フロントエンドにかけた日数が 28 日です。既存のライブラリを最大限活用し、フロント部分をいかに早く終わらせるかがキモだと感じます。</li>\n<li>ところで、良い写真をお持ちでしたらぜひ投稿してください 📸。写真がそこそこ集まったらダミーデータは削除するつもりです。</li>\n</ul>","fields":{"slug":"/2018-07-31-デモシステムを作成しました/"},"frontmatter":{"title":"デモシステムを作成しました","summary":"営業活動を行うにあたり、デモ用の Web サービスを作成しましたのでご紹介させてください。","date":"2018-07-31T11:22:26+09:00","dateModified":"2018-07-31T11:22:26+09:00","thumbnail":"/blogImages/20180731_phone.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-07-31-デモシステムを作成しました/","modifiedDate":"2018-07-31T11:22:26+09:00"}}}