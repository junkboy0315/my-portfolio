{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/2019-09-22-cloud-run/","result":{"data":{"markdownRemark":{"excerpt":"これまでのインフラの課題 API サーバを作るとき、インフラの選択肢はいくつかあると思います。\nどれも、それぞれ短所があります。 仮想サーバを用意する場合 管理やスケーリングを自分でやる必要がある Lambda…","html":"<h2>これまでのインフラの課題</h2>\n<p>API サーバを作るとき、インフラの選択肢はいくつかあると思います。\nどれも、それぞれ短所があります。</p>\n<h4>仮想サーバを用意する場合</h4>\n<ul>\n<li>管理やスケーリングを自分でやる必要がある</li>\n</ul>\n<h4>Lambda などのクラウドファンクションを使う場合</h4>\n<ul>\n<li>デバッグが辛い</li>\n<li>移行性が低い</li>\n<li>言語やライブラリ等に制約がある</li>\n<li>RDB と相性が悪い</li>\n</ul>\n<h4>Fargate などのフルマネージドコンテナサービスを使う</h4>\n<ul>\n<li>使っていないときも課金される</li>\n</ul>\n<h2>Cloud Run のメリット</h2>\n<p>GCP の Cloud Run は、仮想マシンを使ったサーバフル運用の利点と、\nLambda などを使ったサーバレスの利点をどちらも享受できるサービスです。</p>\n<p>ざっくりで言うと、Docker で書ける Lambda という印象です。</p>\n<p>Cloud Run は、前述のデメリットを全て解消しています。</p>\n<h4>管理やスケーリングを自分でやる必要がある</h4>\n<p>=> コンテナの数が増えることで、自動的にスケールします。コンテナが動作するインフラはフルマネージドなので、ユーザは何も考える必要がありません。また、スケールする閾値も設定できます。</p>\n<h4>デバッグが辛い</h4>\n<p>=> Docker なので、ローカルでの開発やデバッグは今までどおり行えます。</p>\n<h4>使用できるライブラリに制約がある</h4>\n<p>=> Docker なので、基本的に制約はありません。</p>\n<h4>RDB と相性が悪い</h4>\n<p>=> 1 つのコンテナあたり最大で 80 までのリクエストを扱う、といった設定ができます。1 コンテナあたり SQL サーバへの接続は基本的に 1 つなので、Lambda のように SQL サーバとの接続が量産されてしまうことがありません。</p>\n<h4>使っていないときも課金される</h4>\n<p>=> 使っていないときはコンテナ数が 0 になり、完全に停止します。再び接続があれば、新たにコンテナが起動します。ちなみに、Node.js+Postgres で作った API サーバのブートアップタイムは 1 秒以下でした。</p>\n<h2>料金</h2>\n<p>ちなみに料金のほうは、「リクエストの処理に費やした時間」に対し、使用した CPU やメモリの使用量を掛けあわせて算出するようです。「コンテナが起動している時間」ではないのがミソです。</p>\n<p><img src=\"https://cloud.google.com/run/docs/images/billable-time.svg\" alt=\"pricing\"></p>\n<p>ざっくり、50 時間程度までは無料のようなので、1 リクエスト 5 ミリ秒で処理するサーバなら、<code class=\"language-text\">50*3600*1000/5</code> = 月間 3600 万リクエストまでは OK という感じでしょうか。デフォルトで 1000request/100sec のクオータがかかっていることもあり、個人のサービスで無料枠を超えることはあまりなさそうですね。</p>\n<h2>所感</h2>\n<p>Dockerfile さえ作っておけば、あとは何も考えなくていいという、超お手軽なインフラサービスといえます。比較的小規模な Web システムや、PoC、趣味のサービスなどは、本当にこれ一本でいいんじゃないかと思いました。</p>\n<p>ちなみに、簡単な設定をするだけで独自ドメインで HTTPS 通信を終端できます。勝手にスケールするうえに、ロードバランサーも不要です。最高ですね。</p>\n<p>Django や Rails などもステートレスであれば動きますし、マイクロサービスとは元より非常に相性がいいのではないでしょうか。Next.js や Nuxt.js をサーバサイドレンダリングモードで動かしつつ、運用費は限りなく無料にする、というようなことも可能だと思います。</p>\n<p>ちなみに、下記のサービスは私の作成したデモサービスで、\nもともと API も DB も Kubernetes 上で動かしていましたが、\nこの度、Cloud Run(API) + Cloud SQL(DB) の構成に変更してみました。</p>\n<p><a href=\"https://travelr.yuuniworks.com/\">https://travelr.yuuniworks.com/</a></p>\n<p>特に何も変化はありませんが、構成が超シンプルになりました。\nまた、Kubernetes のクラスタ代が月 5000 円くらいかかってたのが、\nDB 代の 1000 円だけですむようになりました。</p>","fields":{"slug":"/2019-09-22-cloud-run/"},"frontmatter":{"title":"GCP Cloud Run を使ってみた","summary":"ざっくり言うと、Docker版Lambdaでしょうか。","date":"2019-09-22T16:00:00.000Z","dateModified":"2019-09-22T16:00:00.000Z","thumbnail":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-09-22-cloud-run/","modifiedDate":"2019-09-22T16:00:00.000Z"}}}