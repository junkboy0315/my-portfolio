{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/2018-05-18-presentational-componentとcontainer-component/","result":{"data":{"markdownRemark":{"excerpt":"2019.02.18更新　Dan Abramovさんによって元記事が更新されました。いまはHookが使えるので、この記事にこだわりすぎるな、とのことです。 Redux…","html":"<p>2019.02.18更新　Dan Abramovさんによって元記事が更新されました。いまは<a href=\"https://reactjs.org/docs/hooks-overview.html\">Hook</a>が使えるので、この記事にこだわりすぎるな、とのことです。</p>\n<hr>\n<p>Reduxを使うにあたって、どのようにコンポーネントの使い分けるかということについて、下記のサイトが非常にわかりやすかったので、忘れないようにメモしておきます。\n<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\n</a></p>\n<h2>コンポーネントにおける2つの分類</h2>\n<h3>Presentational Component</h3>\n<ul>\n<li>見た目に関する責任を負う。</li>\n<li>子要素として、Presentational Component、Container Componentのどちらも持ちうる。</li>\n<li>DOMマークアップやスタイルを持つ。</li>\n<li>this.props.childrenを受け取る。</li>\n<li>自分のコンポーネント以外のことについて依存しない。（例：FluxアクションやStoreなど）</li>\n<li>データを自身で勝手に読み込んだり、改変しない。</li>\n<li>データやコールバックは、親からPropsとして受け取る。</li>\n<li>Stateを持つことは少ない（持ったとしても、自身のUIに関する状態だけ）。</li>\n<li>Functional Componentとして書かれる。Component StateやLifecycle Hook、パフォーマンス調整の必要がなければ。</li>\n<li>主な使用例：Page, Sidebar, Story, Userinfo, List</li>\n</ul>\n<h3>Container Component</h3>\n<ul>\n<li>アプリケーションの動作に関する責任を負う。</li>\n<li>子要素として、Presentational Component、Container Componentのどちらも持ちうる。</li>\n<li>DOMマークアップやスタイルを持たない。</li>\n<li>データ及びデータを扱うためのファンクションをPresentational Componentに提供する。</li>\n<li>Flux Actionを発火する。また、発火するためのファンクションを子要素に提供する。</li>\n<li>Stateを持つ。データソースとして機能する。</li>\n<li>react-redux.connect()などのHOCを使って生成される。</li>\n<li>主な使用例：UserPage, FollowersSidebar, StoryContainer, FollowedUserList</li>\n</ul>\n<h2>比較</h2>\n<p>以下、<a href=\"https://redux.js.org/basics/usage-with-react\">redux公式サイト</a>より。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Presentational Components</th>\n<th>Container Components</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>目的</td>\n<td>見た目<br>(markup, styles)</td>\n<td>働き<br>(データ取得、stateのアップデート)</td>\n</tr>\n<tr>\n<td>Redux</td>\n<td>関係なし</td>\n<td>関係あり</td>\n</tr>\n<tr>\n<td>データの取得</td>\n<td>props</td>\n<td>Redux stateをsubscribe</td>\n</tr>\n<tr>\n<td>データの変更</td>\n<td>propsから取得したCallbackを使う</td>\n<td>ReduxのactionsをDispatchする</td>\n</tr>\n<tr>\n<td>作成方法</td>\n<td>手動</td>\n<td>React-Reduxのconnect()</td>\n</tr>\n</tbody>\n</table>\n<h2>この分け方にするメリット</h2>\n<ul>\n<li>アプリケーション部分とUI部分を分離できる</li>\n<li>再利用性が高い</li>\n<li>Containerに重複したレイアウトを記載しなくなる。（SidebarやPageといったレイアウトをPresentational Componentとして抽出することを強制される。Containerから、レイアウトコンポーネントに対してchildrenを渡してやるスタイル。）</li>\n</ul>\n<h2>どのようにContainerを使い始めるか</h2>\n<p>Presentational Componentだけでアプリを作り始めるのがおすすめ。そのうち、データを親から受け取って子供に渡しているだけの、無駄に大きい中間コンポーネントが発生する。それをContainerにするとよい。とのこと。</p>","fields":{"slug":"/2018-05-18-presentational-componentとcontainer-component/"},"frontmatter":{"title":"Presentational ComponentとContainer Component","summary":"Reduxを使うにあたって、どのようにコンポーネントの使い分けるか","date":"2018-05-18T09:45:12+09:00","dateModified":"2018-05-18T09:45:12+09:00","thumbnail":"/blogImages/20180518.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-05-18-presentational-componentとcontainer-component/","modifiedDate":"2018-05-18T09:45:12+09:00"}}}